spring:
  application:
    name: eureka-feign-client
server:
  port: 9906
eureka:
  client:
    serviceUrl:
      defaultZone: http://pom-eureka1:9901/eureka
feign:
  hystrix:
    enabled: false
  client:
    config:
      default:
        connectTimeout: 10000
        readTimeout: 600000
        loggerLevel: full
  okhttp:
    enabled: true


#  httpclient:
#    connection-timeout:
#    time-to-live:

#enbaled设置为false，fallback方法无效？


#mills       connectTimeout        readTimeout      result        retry(100,1000,3)
#950             1000                3000            conn          1
#1050            1000                3000            conn          1
#2050            1000                3000            conn          1
#3050            1000                3000            fail          1+2
#2950            1000                3000            conn          1


#mills       connectTimeout        readTimeout      result        retry(1000,1000,3)
#3050            1000                3000            fail          1+2
#2950            1000                3000            conn          1



#mills       connectTimeout        readTimeout      result        retry(1000,1000,5)
#2950            1000                3000            conn          1
#3050            1000                3000            fail          2+3


#mills       connectTimeout        readTimeout      result        retry(100,5000,3)
#2950            1000                3000            conn          1
#3050            1000                3000            fail          1+2
#必然重试？
#3050            1000                5000            conn          1
#4950            1000                5000            conn          1
#5050            1000                5000            fail          1+2




#如果在重试期间，时间超过了hystrix的超时时间，便会立即执行熔断，fallback。
#所以要根据上面配置的参数计算hystrix的超时时间，使得在重试期间不能达到hystrix的超时时间，不然重试机制就会没有意义


#  httpclient:
#    connection-timeout: 2000
#    connection-timer-repeat: 3000

#feign内部有没有集成ribbon？？？
#ribbon:
#  OkToRetryOnAllOperations: false #对所有操作请求都进行重试,默认false
#  ReadTimeout: 1000   #负载均衡超时时间，默认值5000
#  ConnectTimeout: 3000 #ribbon请求连接的超时时间，默认值2000
#  MaxAutoRetries: 0     #对当前实例的重试次数，默认0
#  MaxAutoRetriesNextServer: 1 #对切换实例的重试次数，默认1

#hystrix 熔断机制
#hystrix:
#  shareSecurityContext: true
#  command:
#    default:
#      circuitBreaker:
#        # 熔断后的重试时间窗口，且在该时间窗口内只允许一次重试。即在熔断开关打开后，在该时间窗口允许有一次重试，如果重试成功，则将重置Health采样统计并闭合熔断开关实现快速恢复，否则熔断开关还是打开状态，执行快速失败, 默认为为5s。
#        sleepWindowInMilliseconds: 10000
#        # 如果在一个采样时间窗口内，失败率超过该配置，则自动打开熔断开关实现降级处理，即快速失败。默认配置下采样周期为10s，失败率为50%。
#        errorThresholdPercentage: 50
#        # 在熔断开关闭合情况下，在进行失败率判断之前，一个采样周期内必须进行至少N个请求才能进行采样统计，目的是有足够的采样使得失败率计算正确，默认为20。
#        requestVolumeThreshold: 20
#        # 是否强制关闭熔断开关，如果强制关闭了熔断开关，则请求不会被降级，一些特殊场景可以动态配置该开关，默认为false。
#        forceClosed: false
#        # 是否强制打开熔断开关，如果强制打开可熔断开关，则请求强制降级调用getFallback处理，可以通过动态配置来打开该开关实现一些特殊需求，默认为false。
#        forceOpen: false
#      execution:
#        isolation:
#          thread:
#            # 是否启用执行超时机制，默认为true
#            timeoutEnabled: true
#            # 执行超时时间，默认为1000毫秒，如果命令是线程隔离，且配置了executionIsolationThreadInterruptOnTimeout=true，则执行线程将执行中断处理。如果命令是信号量隔离，则进行终止操作，因为信号量隔离与主线程是在一个线程中执行，其不会中断线程处理，所以要根据实际情况来决定是否采用信号量隔离，尤其涉及网络访问的情况。
#            timeoutInMilliseconds: 1000
#            # 当隔离策略为THREAD时，当执行线程执行超时时，是否进行中断处理，即Future#cancel(true)处理，默认为false。
#            interruptOnFutureCancel: true
#            # 当隔离策略为THREAD时，当执行线程执行超时时，是否进行中断处理，默认为true。
#            interruptOnTimeout: true
#management:
#  endpoint:
#    hystrix:
#      config:
